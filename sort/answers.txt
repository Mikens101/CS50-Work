
Overall Data...
    Trial #1:          Time on random10000.txt
        sort1     real: 0.353s
        sort2     real: 0.106s
        sort3     real: 0.209s

    Trial #2:          Time on sorted10000.txt
        sort1     real: 0.101s
        sort2     real: 0.095s
        sort3     real: 0.208s

sort1 uses: Bubble Sort

    How do you know?:
        Bubble sort has upperbound O(n^2) and lowerbound Ω(n). Since its upperbound requires the most time to finish sorting -worst case senario-, during a random sort, it should take a longer time than at least 1/3 of the sort options.

        Trial #1:   time ./sort1 random10000.txt
        Result:     real: 0.353s

        Compared to the other 2 sorts, it turned out to take the longest time to sort. Although this didn't mean it was bubble sort, it narrowed the options to bubble sort or selection sort (both having 0(n^2)). To decide which was which, a second test on the sorted10000.txt was used.

        Trial #2:   time ./sort1 sorted10000.txt
        Result:     real: 0.101s

        Because the times change when dealing with different data sets, we can infer that sort1 is bubble sort over the other 'longer' sort from trial 1. With the 'best case senario' -sorted-, the sort took n times as long isntead of n^2.

sort2 uses: Merge Sort

    How do you know?:
        Merge sort has both an upperbound and lowerbound of θ(n logn). Since this sort should take the least amount of time to run in the worst case senario, it was tested against the other sorts using random10000.txt

        Trial #1:   time ./sort2 random10000.txt
        Results:    real: 0.106s

        Although sort2 did end up being the fast out of the 3 sorts, it still doesn't prove that it is a merge sort because one of the other sorts could have had a luckier run. Using best case senario in the sorted10000.txt could then show what sort it truly is.

        Trial #2:   time ./sort2 sorted10000.txt
        Results:    real: 0.095s

        Being still the fastest time, and very close to its time on the random10000.txt run, proves that merge sort is being represented in sort2; having bounds that are both the same, and the most efficient especially with random data sets.

sort3 uses: Selection Sort

    How do you know?:
        Selection sorthas both an upperbound and lowerbound of θ(n^2). Since it requires the most time to finish sorting -worst & best case senario-, it should take a longer time than at least 1/3 of the sort options (bubble sort's upperbound is the same).

        Trial #1:   time ./sort3 random10000.txt
        Result:     real: 0.209s

        Due to its luck, it was faster than sort 1, but slower than sort 3. This doesn't prove that it is infact selection sort, but it does eliminate the possibility of it being merge sort -the fastest sort from random.

        Trial #2:   time ./sort3 sorted10000.txt
        Results:    real: 0.208s

        With best and worst case senario both outputting the same slow running time, then this sort must be selection sort. 